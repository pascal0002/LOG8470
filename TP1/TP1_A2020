	
/* DÃ©finition de variables et de constantes */
#define MAX 100
#define MAX_VALUE_INT 214748
int cardNum = 69;
byte loginAttempts = 0;
int accountBalance = 1250;
int moneyToWithdraw = MAX_VALUE_INT;

#define withdrawType 0
#define depositType 1
#define reimbursementType 2

byte transactionType[MAX];
int transactionAmount[MAX];
byte transactionArrSize = 0;
int lastDeposit = 0;

bool PINOK = false;
bool cardLock = false;
bool transactionOK = false;

mtype = {transactionOk, transactionError, transactionUnsuccessful, PINvalid, PINinvalid, verifyPIN,
	requestWithdrawal, requestBalance, requestLogon, cardLocked, makeDeposit, ejectCard, cancelDeposit};



proctype client(chan cashDispenser_client; chan client_cashDispenser) {



Request_Logon:

if

  ::atomic{cashDispenser_client?eval(cardNum),requestLogon,PINvalid,0->PINOK=true;printf("Right PIN entered\n");}

  ::atomic{cashDispenser_client?eval(cardNum),requestLogon,PINinvalid,0->PINOK=false;
   printf("You entered an invalid PIN\n");
   goto Request_Logon}

  ::atomic{cashDispenser_client?eval(cardNum),requestLogon,cardLocked,0->PINOK=false;
   printf("Card is Locked\n");
   cardLock=true;goto CardLocked}

fi;



int withdrawAmount;
int accountBalanceInfo;
int depositAmount;

selectOperation:

if
::atomic{cashDispenser_client?cardNum,requestWithdrawal,transactionOk,withdrawAmount->printf("Transaction OK\n");}

::atomic{cashDispenser_client?cardNum,requestWithdrawal,transactionError,withdrawAmount->printf("Transaction error\n");}

::atomic{cashDispenser_client?cardNum,requestWithdrawal,transactionUnsuccessful,withdrawAmount->printf("Transaction unsucessful\n");}

::atomic{cashDispenser_client?cardNum,requestBalance, transactionOk, accountBalanceInfo->printf("Account Balance: %d $\n", accountBalanceInfo);}

::atomic{cashDispenser_client?cardNum,makeDeposit, transactionOk, depositAmount->printf("Deposited %d $ to the account\n", depositAmount);}

::atomic{cashDispenser_client?cardNum,ejectCard, 0, 0->
		
	printf("Card ejected\n"); 
	byte i;
	printf("This is your receipt:\n"); 
	for (i: 0 .. transactionArrSize-1) {
		if
		::(transactionType[i] == depositType)->printf("	Deposit: %d$\n",  transactionAmount[i]); 
		::(transactionType[i] == withdrawType)->printf("	Withdraw: %d$\n",  transactionAmount[i]); 
		::(transactionType[i] == reimbursementType)->printf("	Reimbursement: %d$\n",  transactionAmount[i]); 
		::else->skip;
		fi;
	}
	printf("Balance: %d$\n", accountBalance); 
	transactionArrSize = 0;
	goto Request_Logon;}

fi;

goto selectOperation; 

CardLocked: //TODO
}





proctype cashDispenser(chan client_cashDispenser; chan cashDispenser_atmNetwork; chan atmNetwork_cashDispenser; chan cashDispenser_client) {

/*A  process  of  dispenser  dispense  cash  only  when  the  PIN and the amount entered is valid*/

int PIN;

start:

atomic{client_cashDispenser?cardNum,requestLogon,0,PIN->cashDispenser_atmNetwork!cardNum,requestLogon,0,PIN;}	
if 
::(cardLock)->printf("Card is locked!");goto start;
::else->skip;
fi;

if
   :: atomic{ atmNetwork_cashDispenser?eval(cardNum),requestLogon,PINvalid,0->cashDispenser_client!cardNum,requestLogon,PINvalid,0;goto Handle_Request;}

   :: atomic{ atmNetwork_cashDispenser?eval(cardNum),requestLogon,PINinvalid,0-> cashDispenser_client!cardNum,requestLogon,PINinvalid,0;goto start;}

   :: atomic{ atmNetwork_cashDispenser?eval(cardNum),requestLogon,cardLocked,0-> cashDispenser_client!cardNum,requestLogon,cardLocked,0;goto start;}

fi;

int withdrawAmount;
int accountBalanceInfo;
int depositAmount;

Handle_Request: 

// Forward the message to the atmNetwork
if
	:: atomic{client_cashDispenser?cardNum,requestWithdrawal, 0, withdrawAmount->cashDispenser_atmNetwork!cardNum,requestWithdrawal, 0, withdrawAmount}; 

	:: atomic{client_cashDispenser?cardNum,requestBalance,0, 0->cashDispenser_atmNetwork!cardNum,requestBalance,0, 0}; 

	:: atomic{client_cashDispenser?cardNum,makeDeposit, 0, depositAmount->cashDispenser_atmNetwork!cardNum,makeDeposit, 0, depositAmount};
	
	:: atomic{client_cashDispenser?cardNum,cancelDeposit, 0, 0->cashDispenser_atmNetwork!cardNum,cancelDeposit, 0, 0};

	:: atomic{client_cashDispenser?cardNum,ejectCard, 0, 0->cashDispenser_atmNetwork!cardNum,ejectCard, 0, 0};

	
fi;

//  Forward the response to the client
if
	::atomic{atmNetwork_cashDispenser?cardNum,requestWithdrawal, transactionOk,withdrawAmount->cashDispenser_client!cardNum,requestWithdrawal,transactionOk,withdrawAmount;}

	::atomic{atmNetwork_cashDispenser?cardNum,requestWithdrawal,transactionError,withdrawAmount->cashDispenser_client!cardNum,requestWithdrawal,transactionError,withdrawAmount;}

	::atomic{atmNetwork_cashDispenser?cardNum,requestWithdrawal,transactionUnsuccessful,withdrawAmount->cashDispenser_client!cardNum,requestWithdrawal,transactionUnsuccessful,withdrawAmount;}

	::atomic{atmNetwork_cashDispenser?cardNum,requestBalance,transactionOk,accountBalanceInfo->cashDispenser_client!cardNum,requestBalance,transactionOk,accountBalanceInfo;}

	::atomic{atmNetwork_cashDispenser?cardNum,makeDeposit, transactionOk, depositAmount->cashDispenser_client!cardNum,makeDeposit, transactionOk, depositAmount;}
	
	:: atomic{atmNetwork_cashDispenser?cardNum,ejectCard, 0, 0->cashDispenser_client!cardNum,ejectCard, 0, 0; goto start};

fi;
goto Handle_Request;
}





/*The  process of ATM  network refers tothe  network of the ATM owner bankwhichchecksbank details of the client and then  sendsthe  details  to  the host  bank network  for  PIN verification and other account details verification. */
proctype atmNetwork(chan cashDispenser_atmNetwork; chan atmNetwork_hostAtmServer; chan hostAtmServer_atmNetwork; chan atmNetwork_cashDispenser) {

int PIN;
Check_Bank_Details:

if
  
   ::cashDispenser_atmNetwork?eval(cardNum),requestLogon,0,PIN->
   if
     
     ::(loginAttempts<3)->atmNetwork_hostAtmServer!cardNum,verifyPIN,0,PIN->
            if
	
                ::atomic{hostAtmServer_atmNetwork?eval(cardNum),verifyPIN,PINvalid, 0->atmNetwork_cashDispenser!cardNum,requestLogon,PINvalid, 0;goto Handle_Request;}

                ::atomic{hostAtmServer_atmNetwork?eval(cardNum),verifyPIN,PINinvalid, 0->atmNetwork_cashDispenser!cardNum,requestLogon,PINinvalid, 0;loginAttempts=loginAttempts+1;goto Check_Bank_Details} 

            fi;
    
      ::else -> atomic{atmNetwork_cashDispenser!cardNum,requestLogon,cardLocked, 0->cardLock=true;loginAttempts=loginAttempts+1;goto Check_Bank_Details}
   fi;
fi;

int withdrawAmount;
int accountBalanceInfo;
int depositAmount;

Handle_Request: //TODO 

// Forward request to host
if
	:: atomic{cashDispenser_atmNetwork?cardNum,requestWithdrawal,0, withdrawAmount->atmNetwork_hostAtmServer!cardNum,requestWithdrawal,0, withdrawAmount}; 

	:: atomic{cashDispenser_atmNetwork?cardNum,requestBalance,0, 0->atmNetwork_hostAtmServer!cardNum,requestBalance,0, 0}; 

	:: atomic{cashDispenser_atmNetwork?cardNum,makeDeposit, 0, depositAmount->atmNetwork_hostAtmServer!cardNum,makeDeposit, 0, depositAmount};
	
	:: atomic{cashDispenser_atmNetwork?cardNum,cancelDeposit, 0, 0->atmNetwork_hostAtmServer!cardNum,cancelDeposit, 0, 0};
	
	:: atomic{cashDispenser_atmNetwork?cardNum,ejectCard, 0, 0->atmNetwork_hostAtmServer!cardNum,ejectCard, 0, 0};

fi;

// Forward response to dispenser
if
	::atomic{hostAtmServer_atmNetwork?cardNum,requestWithdrawal,transactionOk,withdrawAmount->atmNetwork_cashDispenser!cardNum,requestWithdrawal,transactionOk,withdrawAmount;}

	::atomic{hostAtmServer_atmNetwork?cardNum,requestWithdrawal,transactionError,withdrawAmount->atmNetwork_cashDispenser!cardNum,requestWithdrawal,transactionError,withdrawAmount;}

	::atomic{hostAtmServer_atmNetwork?cardNum,requestWithdrawal,transactionUnsuccessful,withdrawAmount->atmNetwork_cashDispenser!cardNum,requestWithdrawal,transactionUnsuccessful,withdrawAmount;}

	::atomic{hostAtmServer_atmNetwork?cardNum,requestBalance,transactionOk,accountBalanceInfo->atmNetwork_cashDispenser!cardNum,requestBalance,transactionOk,accountBalanceInfo;}

	::atomic{hostAtmServer_atmNetwork?cardNum,makeDeposit, transactionOk,depositAmount->atmNetwork_cashDispenser!cardNum,makeDeposit, transactionOk,depositAmount;}

	:: atomic{hostAtmServer_atmNetwork?cardNum,ejectCard, 0, 0->atmNetwork_cashDispenser!cardNum,ejectCard, 0, 0; goto Check_Bank_Details};

fi;
goto Handle_Request;
}





/* The process of host ATM network refers to the network of client  host  bank  which  verifies  the  PIN  and  other  account details. */
proctype hostAtmServer(chan atmNetwork_hostAtmServer; chan hostAtmServer_atmNetwork) {

int PIN;
server_start:

atomic{atmNetwork_hostAtmServer?eval(cardNum),verifyPIN,0,PIN};

if
// TODO: Declare const for the valid PIN instead of 100
::(PIN == 100)->hostAtmServer_atmNetwork!cardNum,verifyPIN,PINvalid, 0->PINOK=true;goto Cash_Withdrawal;
::else->hostAtmServer_atmNetwork!cardNum,verifyPIN,PINinvalid, 0->PINOK=false;goto server_start;
fi;

int withdrawAmount;
int depositAmount;

// TODO Handle case where depositAmount is smaller than 0
Cash_Withdrawal:

if
	::atomic{atmNetwork_hostAtmServer?cardNum,requestWithdrawal,0,withdrawAmount->


	if

		::atomic{(withdrawAmount<=accountBalance)->

		if

			::(withdrawAmount > 0)->atomic{hostAtmServer_atmNetwork!cardNum,requestWithdrawal,transactionOk,withdrawAmount->
				accountBalance=accountBalance-withdrawAmount;
				transactionOK=true;
				
				transactionType[transactionArrSize] = withdrawType;
				transactionAmount[transactionArrSize] = withdrawAmount;
				transactionArrSize = transactionArrSize + 1;				

				goto Cash_Withdrawal;}

			::else->atomic{hostAtmServer_atmNetwork!cardNum,requestWithdrawal,transactionError,withdrawAmount->transactionOK=false;goto Cash_Withdrawal;}

	   fi;}


		::atomic{(withdrawAmount>accountBalance)->hostAtmServer_atmNetwork!cardNum,requestWithdrawal,transactionUnsuccessful,withdrawAmount->transactionOK=false;goto Cash_Withdrawal;}

	fi;}
	
	::atomic{atmNetwork_hostAtmServer?cardNum,requestBalance,0,0->
		hostAtmServer_atmNetwork!cardNum,requestBalance,transactionOk,accountBalance->
		goto Cash_Withdrawal;}
	
	:: atomic{atmNetwork_hostAtmServer?cardNum,makeDeposit, 0, depositAmount->
		accountBalance = accountBalance + depositAmount;
		hostAtmServer_atmNetwork!cardNum,makeDeposit, transactionOk, depositAmount;

		transactionType[transactionArrSize] = depositType;
		transactionAmount[transactionArrSize] = depositAmount;
		transactionArrSize = transactionArrSize + 1;

		goto Cash_Withdrawal};	
		
	:: atomic{atmNetwork_hostAtmServer?cardNum,cancelDeposit, 0, 0->
		if

			::atomic{(depositAmount<=accountBalance)->

			if

				::(depositAmount > 0)->atomic{hostAtmServer_atmNetwork!cardNum,requestWithdrawal,transactionOk,depositAmount->
					accountBalance=accountBalance-depositAmount;
					transactionOK=true;
					
					transactionType[transactionArrSize] = reimbursementType;
					transactionAmount[transactionArrSize] = depositAmount;
					transactionArrSize = transactionArrSize + 1;				

					goto Cash_Withdrawal;}

				::else->atomic{hostAtmServer_atmNetwork!cardNum,requestWithdrawal,transactionError,depositAmount->transactionOK=false;goto Cash_Withdrawal;}

		   fi;}


			::atomic{(depositAmount>accountBalance)->hostAtmServer_atmNetwork!cardNum,requestWithdrawal,transactionUnsuccessful,depositAmount->transactionOK=false;goto Cash_Withdrawal;}

		fi;}

	:: atomic{atmNetwork_hostAtmServer?cardNum,ejectCard, 0, 0->
		
		hostAtmServer_atmNetwork!cardNum,ejectCard, 0, 0;
		goto server_start;};

fi;
}





init {
            chan cashDispenser_client=[MAX] of {int,mtype,mtype,int}; 

             chan client_cashDispenser=[MAX] of {int,mtype,mtype,int}; 

            chan cashDispenser_atmNetwork=[MAX] of {int,mtype,mtype,int}; 

            chan atmNetwork_cashDispenser=[MAX] of {int,mtype,mtype,int}; 

            chan atmNetwork_hostAtmServer=[MAX] of {int,mtype,mtype,int}; 

            chan hostAtmServer_atmNetwork=[MAX] of {int,mtype,mtype,int}; 

            

            run client(cashDispenser_client, client_cashDispenser);
            run cashDispenser(client_cashDispenser, cashDispenser_atmNetwork, atmNetwork_cashDispenser, cashDispenser_client);
            run atmNetwork(cashDispenser_atmNetwork, atmNetwork_hostAtmServer, hostAtmServer_atmNetwork, atmNetwork_cashDispenser);
            run hostAtmServer(atmNetwork_hostAtmServer, hostAtmServer_atmNetwork);

	/*
	// Authentificate user
	client_cashDispenser!cardNum, requestLogon, 0, 12;
	client_cashDispenser!cardNum, requestLogon, 0, 13; 
	//client_cashDispenser!cardNum, requestLogon, 0, 14;
	//client_cashDispenser!cardNum, requestLogon, 0, 15;
	client_cashDispenser!cardNum, requestLogon, 0, 100; 
	
	// Withdraw
	moneyToWithdraw = 100;
	client_cashDispenser!cardNum,requestWithdrawal, 0, moneyToWithdraw; 
	client_cashDispenser!cardNum,requestWithdrawal, 0, moneyToWithdraw; 
	client_cashDispenser!cardNum,requestWithdrawal, 0, moneyToWithdraw; 
	moneyToWithdraw = 25;
	client_cashDispenser!cardNum,requestWithdrawal, 0, moneyToWithdraw;

	// Deposits + get balance
	client_cashDispenser!cardNum,requestBalance, 0, 0;

	client_cashDispenser!cardNum, makeDeposit, 0,1000;
	client_cashDispenser!cardNum,makeDeposit, 0, 20;

	client_cashDispenser!cardNum,requestBalance, 0, 0;
	client_cashDispenser!cardNum,requestBalance, 0, 0;

	// Eject card
	client_cashDispenser!cardNum,ejectCard, 0, 0;
	
	// Re authenticate user
	atomic{client_cashDispenser!cardNum, requestLogon, 0, 100; }
	client_cashDispenser!cardNum, makeDeposit, 0,1000;
	client_cashDispenser!cardNum,ejectCard, 0, 0;*/
	
	client_cashDispenser!cardNum, requestLogon, 0, 100; 
	
	 // Deposit
	client_cashDispenser!cardNum,makeDeposit, 0, 20;

	client_cashDispenser!cardNum,makeDeposit, 0, 40;

	// Reimbursement 
                client_cashDispenser!cardNum,cancelDeposit, 0, 0;   

	// Check balance
	client_cashDispenser!cardNum,requestBalance, 0, 0;      
	
	// eject card
	client_cashDispenser!cardNum,ejectCard, 0, 0;

}
 /* specification de propriÃ©tÃ©s */

// 5
//ltl p1 {[](loginAttempts > 3 -> cardLock)}; //safety
ltl p2 {!transactionOK U (PINOK && (moneyToWithdraw < accountBalance))}; //liveness
//ltl p3 {<>transactionOK};

//ltl a {PINvalid -> [] makeDeposit};
//ltl b {PINvalid -> (requestWithdrawal || requestBalance || makeDeposit ) U ejectCard };
//ltl c {makeDeposit -> <> ( cancelDeposit || !cancelDeposit)};

//6
