	
/* Définition de variables et de constantes */
#define MAX 100
#define MAX_VALUE_BYTE 255
byte cardNum = 69;
byte loginAttempts = 0;
int accountBalance = 250;
byte moneyToWithdraw = MAX_VALUE_BYTE;

bool PINOK = false;
bool cardLock = false;
bool transactionOK = false;

mtype = {transactionOk, transactionError, transactionUnsuccessful, PINvalid, PINinvalid, verifyPIN, requestWithdrawal, requestBalance, requestLogon, cardLocked};



proctype client(chan cashDispenser_client; chan client_cashDispenser) {

// Should this be in init() or here?
atomic{client_cashDispenser!cardNum, requestLogon, 0, 12;}
atomic{client_cashDispenser!cardNum, requestLogon, 0, 13; }
//client_cashDispenser!cardNum, requestLogon, 0, 14;
//client_cashDispenser!cardNum, requestLogon, 0, 15;
atomic{client_cashDispenser!cardNum, requestLogon, 0, 100; }

Request_Logon:

if

  ::atomic{cashDispenser_client?eval(cardNum),requestLogon,0,PINvalid->PINOK=true;printf("Right PIN entered\n");}

  ::atomic{cashDispenser_client?eval(cardNum),requestLogon,0,PINinvalid->PINOK=false;
   printf("You entered an invalid PIN\n");
   goto Request_Logon}

  ::atomic{cashDispenser_client?eval(cardNum),requestLogon,0,cardLocked->PINOK=false;
   printf("Card is Locked\n");
   cardLock=true;goto CardLocked}

fi;

// Should this be in init() or here?
moneyToWithdraw = 100;
client_cashDispenser!cardNum,requestWithdrawal, moneyToWithdraw,100; 
client_cashDispenser!cardNum,requestWithdrawal, moneyToWithdraw,100; 
client_cashDispenser!cardNum,requestWithdrawal, moneyToWithdraw,100; 
	moneyToWithdraw = 25;
	client_cashDispenser!cardNum,requestWithdrawal, moneyToWithdraw,100;
client_cashDispenser!cardNum,requestBalance, 0,100;

byte withdrawAmount;
byte accountBalance;

selectOperation:

if
::atomic{cashDispenser_client?cardNum,requestWithdrawal,withdrawAmount,transactionOk->printf("Transaction OK\n");}

::atomic{cashDispenser_client?cardNum,requestWithdrawal,withdrawAmount,transactionError->printf("Transaction error\n");}

::atomic{cashDispenser_client?cardNum,requestWithdrawal,withdrawAmount,transactionUnsuccessful->printf("Transaction unsucessful\n");}

::atomic{cashDispenser_client?cardNum,requestBalance,accountBalance,transactionOk->printf("Account Balance: %d", accountBalance);}
fi;

goto selectOperation; 

CardLocked: //TODO
}





proctype cashDispenser(chan client_cashDispenser; chan cashDispenser_atmNetwork; chan atmNetwork_cashDispenser; chan cashDispenser_client) {

/*A  process  of  dispenser  dispense  cash  only  when  the  PIN and the amount entered is valid*/

byte PIN;

start:

atomic{client_cashDispenser?cardNum,requestLogon,0,PIN->cashDispenser_atmNetwork!cardNum,requestLogon,0,PIN;}	
if 
::(cardLock)->printf("Card is locked!");goto start;
::else->skip;
fi;

if
   :: atomic{ atmNetwork_cashDispenser?eval(cardNum),requestLogon,0,PINvalid->cashDispenser_client!cardNum,requestLogon,0,PINvalid;goto Cash_Withdrawal;}

   :: atomic{ atmNetwork_cashDispenser?eval(cardNum),requestLogon,0,PINinvalid-> cashDispenser_client!cardNum,requestLogon,0,PINinvalid;goto start;}

   :: atomic{ atmNetwork_cashDispenser?eval(cardNum),requestLogon,0,cardLocked-> cashDispenser_client!cardNum,requestLogon,0,cardLocked;goto start;}

fi;

byte withdrawAmount;
byte accountBalance;

Cash_Withdrawal: 

if
atomic{client_cashDispenser?cardNum,requestWithdrawal,withdrawAmount, PIN->cashDispenser_atmNetwork!cardNum,requestWithdrawal,withdrawAmount, PIN}; 

atomic{client_cashDispenser?cardNum,requestBalance,0, PIN->cashDispenser_atmNetwork!cardNum,requestBalance,0, PIN}; 
fi;

if
::atomic{atmNetwork_cashDispenser?cardNum,requestWithdrawal,withdrawAmount,transactionOk->cashDispenser_client!cardNum,requestWithdrawal,withdrawAmount,transactionOk;}

::atomic{atmNetwork_cashDispenser?cardNum,requestWithdrawal,withdrawAmount,transactionError->cashDispenser_client!cardNum,requestWithdrawal,withdrawAmount,transactionError;}

::atomic{atmNetwork_cashDispenser?cardNum,requestWithdrawal,withdrawAmount,transactionUnsuccessful->cashDispenser_client!cardNum,requestWithdrawal,withdrawAmount,transactionUnsuccessful;}

::atomic{atmNetwork_cashDispenser?cardNum,requestBalance,accountBalance,transactionOk->cashDispenser_client!cardNum,requestBalance,accountBalance,transactionOk;}
fi;
goto Cash_Withdrawal;
}





/*The  process of ATM  network refers tothe  network of the ATM owner bankwhichchecksbank details of the client and then  sendsthe  details  to  the host  bank network  for  PIN verification and other account details verification. */
proctype atmNetwork(chan cashDispenser_atmNetwork; chan atmNetwork_hostAtmServer; chan hostAtmServer_atmNetwork; chan atmNetwork_cashDispenser) {

byte PIN;
Check_Bank_Details:

if
  
   ::cashDispenser_atmNetwork?eval(cardNum),requestLogon,0,PIN->
   if
     
     ::(loginAttempts<3)->atmNetwork_hostAtmServer!cardNum,verifyPIN,0,PIN->
            if
	
                ::atomic{hostAtmServer_atmNetwork?eval(cardNum),verifyPIN,0,PINvalid->atmNetwork_cashDispenser!cardNum,requestLogon,0,PINvalid;goto Cash_Withdrawal;}

                ::atomic{hostAtmServer_atmNetwork?eval(cardNum),verifyPIN,0,PINinvalid->atmNetwork_cashDispenser!cardNum,requestLogon,0,PINinvalid;loginAttempts=loginAttempts+1;goto Check_Bank_Details} 

            fi;
    
      ::else -> atomic{atmNetwork_cashDispenser!cardNum,requestLogon,0,cardLocked->cardLock=true;loginAttempts=loginAttempts+1;goto Check_Bank_Details}
   fi;
fi;

byte withdrawAmount;
byte accountBalance;

Cash_Withdrawal: //TODO

if
atomic{cashDispenser_atmNetwork?cardNum,requestWithdrawal,withdrawAmount, PIN->atmNetwork_hostAtmServer!cardNum,requestWithdrawal,withdrawAmount, PIN}; 

atomic{cashDispenser_atmNetwork?cardNum,requestBalance,0, PIN->atmNetwork_hostAtmServer!cardNum,requestBalance,0, PIN}; 
fi;

if
::atomic{hostAtmServer_atmNetwork?cardNum,requestWithdrawal,withdrawAmount,transactionOk->atmNetwork_cashDispenser!cardNum,requestWithdrawal,withdrawAmount,transactionOk;}

::atomic{hostAtmServer_atmNetwork?cardNum,requestWithdrawal,withdrawAmount,transactionError->atmNetwork_cashDispenser!cardNum,requestWithdrawal,withdrawAmount,transactionError;}

::atomic{hostAtmServer_atmNetwork?cardNum,requestWithdrawal,withdrawAmount,transactionUnsuccessful->atmNetwork_cashDispenser!cardNum,requestWithdrawal,withdrawAmount,transactionUnsuccessful;}

::atomic{hostAtmServer_atmNetwork?cardNum,requestBalance,accountBalance,transactionOk->atmNetwork_cashDispenser!cardNum,requestBalance,accountBalance,transactionOk;}
fi;
goto Cash_Withdrawal;
}





/* The process of host ATM network refers to the network of client  host  bank  which  verifies  the  PIN  and  other  account details. */
proctype hostAtmServer(chan atmNetwork_hostAtmServer; chan hostAtmServer_atmNetwork) {

byte PIN;
server_start:

atomic{atmNetwork_hostAtmServer?eval(cardNum),verifyPIN,0,PIN};

if
// TODO: Declare const for the valid PIN instead of 100
::(PIN == 100)->hostAtmServer_atmNetwork!cardNum,verifyPIN,0,PINvalid->PINOK=true;goto Cash_Withdrawal;
::else->hostAtmServer_atmNetwork!cardNum,verifyPIN,0,PINinvalid->PINOK=false;goto server_start;
fi;

byte withdrawAmount;

Cash_Withdrawal:

if
	::atomic{atmNetwork_hostAtmServer?cardNum,requestWithdrawal,withdrawAmount,PIN->


	if

		::atomic{(withdrawAmount<=accountBalance)->

		if

			::(withdrawAmount > 0)->atomic{hostAtmServer_atmNetwork!cardNum,requestWithdrawal,withdrawAmount,transactionOk->accountBalance=accountBalance-withdrawAmount;transactionOK=true;goto Cash_Withdrawal;}

			::else->atomic{hostAtmServer_atmNetwork!cardNum,requestWithdrawal,withdrawAmount,transactionError->transactionOK=false;goto Cash_Withdrawal;}

	   fi;}


		::atomic{(withdrawAmount>accountBalance)->hostAtmServer_atmNetwork!cardNum,requestWithdrawal,withdrawAmount,transactionUnsuccessful->transactionOK=false;goto Cash_Withdrawal;}

	fi;}
	
	::atomic{atmNetwork_hostAtmServer?cardNum,requestBalance,0,PIN->atomic{hostAtmServer_atmNetwork!cardNum,requestBalance,accountBalance,transactionOk->transactionOK=true;goto Cash_Withdrawal;}}
fi;
}





init {
            chan cashDispenser_client=[MAX] of {byte,mtype,mtype,byte}; 

             chan client_cashDispenser=[MAX] of {byte,mtype,byte,mtype}; 

            chan cashDispenser_atmNetwork=[MAX] of {byte,mtype,mtype,byte}; 

            chan atmNetwork_cashDispenser=[MAX] of {byte,mtype,mtype,byte}; 

            chan atmNetwork_hostAtmServer=[MAX] of {byte,mtype,mtype,byte}; 

            chan hostAtmServer_atmNetwork=[MAX] of {byte,mtype,mtype,mtype}; 

            

            run client(cashDispenser_client, client_cashDispenser);
            run cashDispenser(client_cashDispenser, cashDispenser_atmNetwork, atmNetwork_cashDispenser, cashDispenser_client);
            run atmNetwork(cashDispenser_atmNetwork, atmNetwork_hostAtmServer, hostAtmServer_atmNetwork, atmNetwork_cashDispenser);
            run hostAtmServer(atmNetwork_hostAtmServer, hostAtmServer_atmNetwork);
                            

}
 /* specification de propriétés */

// 5
//ltl p1 {[](loginAttempts > 3 -> cardLock)}; //safety
ltl p2 {!transactionOK U (PINOK && (moneyToWithdraw < accountBalance))}; //liveness
//ltl p3 {<>transactionOK};

//6
